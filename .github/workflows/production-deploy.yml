name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ENVIRONMENT: production
  REGION: asia-south2
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY }}-prd

jobs:
  build-test-deploy-prd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "gke-gcloud-auth-plugin"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker Image
        run: |-
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:latest
          echo "IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:${{ github.sha }}" >> $GITHUB_ENV
          echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d -p 8200:8200 --name test-container $IMAGE_NAME
          
          # Install requests library for testing
          pip install requests
          
          # Run Python tests
          python test.py
          
          # Cleanup
          docker stop test-container
          docker rm test-container

      - name: Push Docker Image
        run: |-
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:latest

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: demo-gke-iris-cluster-prd2
          location: us-central1

      - name: Deploy to Kubernetes
        run: |
          # Update the manifest with the actual image SHA
          sed -i "s|asia-south2-docker.pkg.dev/mlops-may-2025-iitm/my-repo-prd/iris-api:latest|asia-south2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/iris-api:${{ github.sha }}|g" k8s/production-deployment.yaml
          
          # Delete the old deployment if it exists (to avoid selector immutability error)
          kubectl delete deployment demo-iris-workload-prd -n default --ignore-not-found
          
          # Apply the deployment manifest
          kubectl apply -f k8s/production-deployment.yaml
          
          # Wait for rollout to complete
          kubectl rollout status deployment/demo-iris-workload-prd -n default --timeout=300s

      - name: Deploy HPA
        run: |
          # Apply the HPA manifest
          kubectl apply -f k8s/production-hpa.yaml
          
          # Verify HPA is created
          kubectl get hpa -n default

      - name: Notify success
        if: success()
        run: |
          echo "ðŸš€ Successfully built, tested, and pushed image to Production Artifact Registry"
          echo "Image: $IMAGE_NAME"
          echo "Version: $VERSION"
          echo "Your GKE production workload will automatically pick up the new image!"

 